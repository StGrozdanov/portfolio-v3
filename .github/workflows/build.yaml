name: build

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  install_app:
    name: App / install
    runs-on: ubuntu-latest
    env:
      PATH_PREFIX: ${{ github.workspace }}
      CACHE_PREFIX: ""

    outputs:
      cache-path: ${{ steps.cache.outputs.path }}
      cache-key: ${{ steps.cache.outputs.key }}
      cache-restore: ${{ steps.cache.outputs.restore }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json

      - name: Set cache outputs
        id: cache
        run: |
          echo "path=${{ env.PATH_PREFIX }}/node_modules" >> $GITHUB_OUTPUT
          echo "key=${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}" >> $GITHUB_OUTPUT
          echo "restore=${{ format('{0}node_modules-', env.CACHE_PREFIX) }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache.outputs.path }}
          key: ${{ steps.cache.outputs.key }}
          restore-keys: ${{ steps.cache.outputs.restore }}

      - name: Install dependencies (without scripts)
        id: install
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts

      - name: Run post-install scripts
        if: steps.install.outcome == 'success'
        run: npm rebuild && npm run prepare --if-present

  typecheck_app:
    name: Typechecks
    needs: [install_app]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    env:
      PATH_PREFIX: ${{ github.workspace }}
      CACHE_PREFIX: ""

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      
      - name: Load dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_PREFIX }}/node_modules
          key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}

      - name: TypeScript Type Check
        id: type-check
        run: npm run type-check

  lint_app:
    name: Linters
    needs: [install_app]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory || github.workspace }}

    env:
      PATH_PREFIX: ${{ inputs.working-directory && format('{0}/{1}', github.workspace, inputs.working-directory) || github.workspace }}
      CACHE_PREFIX: ${{ inputs.working-directory && format('{0}-', inputs.working-directory) || '' }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Check for existing cache
        id: existing-cache
        run: echo "::set-output name=exists::$(echo \"${{ runner.workspace }}/node_modules\")"
        continue-on-error: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      
      - name: Load dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_PREFIX }}/node_modules
          key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}

      - name: Lint
        run: npm run lint

  unit_test_app:
    name: Unit Tests
    needs: [install_app]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory || github.workspace }}
    env:
      PATH_PREFIX: ${{ inputs.working-directory && format('{0}/{1}', github.workspace, inputs.working-directory) || github.workspace }}
      CACHE_PREFIX: ${{ inputs.working-directory && format('{0}-', inputs.working-directory) || '' }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      
      - name: Load dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_PREFIX }}/node_modules
          key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}

      - name: Run tests
        run: npm run test:ci

  integration_test_app:
    name: Integration Tests
    needs: [install_app, unit_test_app]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: ${{ inputs.working-directory || github.workspace }}
    env:
      PATH_PREFIX: ${{ inputs.working-directory && format('{0}/{1}', github.workspace, inputs.working-directory) || github.workspace }}
      CACHE_PREFIX: ${{ inputs.working-directory && format('{0}-', inputs.working-directory) || '' }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: create env file
        run: |
          touch .env
          echo BASE_API_URL=${{ secrets.BASE_API_MOCK_URL }} >> .env
          echo BASE_URL=${{ secrets.BASE_MOCK_URL }} >> .env

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      
      - name: Load dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_PREFIX }}/node_modules
          key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}

      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npm run test:int
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 10

  deploy_nonprod:
    name: Deploy Nonprod
    needs: [typecheck_app, lint_app, unit_test_app, integration_test_app]
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  e2e_test_app:
    name: e2e tests
    needs: [deploy_nonprod]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: ${{ inputs.working-directory || github.workspace }}
    env:
      PATH_PREFIX: ${{ inputs.working-directory && format('{0}/{1}', github.workspace, inputs.working-directory) || github.workspace }}
      CACHE_PREFIX: ${{ inputs.working-directory && format('{0}-', inputs.working-directory) || '' }}
    steps:
      - uses: actions/checkout@v3
      - name: Restore variables
        uses: UnlyEd/github-action-store-variable@v2.1.1 # See https://github.com/UnlyEd/github-action-store-variable
        with:
          failIfNotFound: true
          variables: |
            VERCEL_DEPLOYMENT_URL
      - name: Install dependencies
        run: npm ci && npx playwright install --with-deps
      - name: Run tests
        run: npx playwright test tests/e2e
        env:
          BASE_URL: ${{ env.VERCEL_DEPLOYMENT_URL }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 10