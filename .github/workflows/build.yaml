name: build

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  install_app:
    name: App / install
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    env:
      PATH_PREFIX: ${{ github.workspace }}
      CACHE_PREFIX: ""

    outputs:
      cache-path: ${{ steps.cache.outputs.path }}
      cache-key: ${{ steps.cache.outputs.key }}
      cache-restore: ${{ steps.cache.outputs.restore }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Check for existing cache
        id: cache
        run: echo "::set-output name=exists::$(echo \"${{ runner.workspace }}/node_modules\")"
        continue-on-error: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      
      - name: Load dependencies
        if: steps.cache.outputs.exists == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_PREFIX }}/node_modules
          key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}

      - name: Set cache outputs
        id: cache
        run: |
          echo "path=${{ env.PATH_PREFIX }}/node_modules" >> $GITHUB_OUTPUT
          echo "key=${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}" >> $GITHUB_OUTPUT
          echo "restore=${{ format('{0}node_modules-', env.CACHE_PREFIX) }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache.outputs.path }}
          key: ${{ steps.cache.outputs.key }}
          restore-keys: ${{ steps.cache.outputs.restore }}

      - name: Install dependencies (without scripts)
        id: install
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts

      - name: Run post-install scripts
        if: steps.install.outcome == 'success'
        run: npm rebuild && npm run prepare --if-present

  typecheck_app:
    name: Typecheck App
    needs: [install_app]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    env:
      PATH_PREFIX: ${{ github.workspace }}
      CACHE_PREFIX: ""

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Check for existing cache
          id: cache
          run: echo "::set-output name=exists::$(echo \"${{ runner.workspace }}/node_modules\")"
          continue-on-error: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      
      - name: Load dependencies
        if: steps.cache.outputs.exists == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_PREFIX }}/node_modules
          key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}

      - name: TypeScript Type Check
        id: type-check
        run: npm run type-check

      # - name: TypeScript Type Check for Tests Directory
      #   id: type-check-tests
      #   run: npm run type-check:tests

  lint_app:
    name: App
    needs: [install_app]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory || github.workspace }}

    env:
      PATH_PREFIX: ${{ inputs.working-directory && format('{0}/{1}', github.workspace, inputs.working-directory) || github.workspace }}
      CACHE_PREFIX: ${{ inputs.working-directory && format('{0}-', inputs.working-directory) || '' }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Check for existing cache
          id: cache
          run: echo "::set-output name=exists::$(echo \"${{ runner.workspace }}/node_modules\")"
          continue-on-error: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      
      - name: Load dependencies
        if: steps.cache.outputs.exists == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_PREFIX }}/node_modules
          key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}

      - name: Lint
        run: npm run lint

  # test_app:
  #   name: App
  #   needs: [install_app]
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ${{ inputs.working-directory || github.workspace }}
  #   env:
  #     PATH_PREFIX: ${{ inputs.working-directory && format('{0}/{1}', github.workspace, inputs.working-directory) || github.workspace }}
  #     CACHE_PREFIX: ${{ inputs.working-directory && format('{0}-', inputs.working-directory) || '' }}

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Check for existing cache
  #         id: cache
  #         run: echo "::set-output name=exists::$(echo \"${{ runner.workspace }}/node_modules\")"
  #         continue-on-error: true

  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.10.0
  #         cache: "npm"
  #         cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      
  #     - name: Load dependencies
  #       if: steps.cache.outputs.exists == 'true'
  #       uses: actions/cache@v3
  #       with:
  #         path: ${{ env.PATH_PREFIX }}/node_modules
  #         key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}

  #     - name: Run Tests
  #       run: npm run test
        
  deploy_nonprod:
    name: Deploy Nonprod
    needs: [typecheck_app, lint_app, test_app, integration_tests]
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}